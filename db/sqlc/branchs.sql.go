// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: branchs.sql

package db

import (
	"context"
	"time"
)

const deleteBranches = `-- name: DeleteBranches :exec
DELETE FROM Branches
WHERE ID = $1
`

func (q *Queries) DeleteBranches(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBranches, id)
	return err
}

const getBranch = `-- name: GetBranch :one
SELECT id, name, location, openingtime, closingtime, createdat, updatedat FROM Branches
WHERE ID = $1
`

func (q *Queries) GetBranch(ctx context.Context, id int32) (Branch, error) {
	row := q.db.QueryRowContext(ctx, getBranch, id)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Openingtime,
		&i.Closingtime,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getBranches = `-- name: GetBranches :many
SELECT id, name, location, openingtime, closingtime, createdat, updatedat FROM Branches
`

func (q *Queries) GetBranches(ctx context.Context) ([]Branch, error) {
	rows, err := q.db.QueryContext(ctx, getBranches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Branch
	for rows.Next() {
		var i Branch
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.Openingtime,
			&i.Closingtime,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBranch = `-- name: InsertBranch :one
INSERT INTO Branches (Name, Location, OpeningTime, ClosingTime)
VALUES ($1, $2, $3, $4) RETURNING id, name, location, openingtime, closingtime, createdat, updatedat
`

type InsertBranchParams struct {
	Name        string    `json:"name"`
	Location    string    `json:"location"`
	Openingtime time.Time `json:"openingtime"`
	Closingtime time.Time `json:"closingtime"`
}

func (q *Queries) InsertBranch(ctx context.Context, arg InsertBranchParams) (Branch, error) {
	row := q.db.QueryRowContext(ctx, insertBranch,
		arg.Name,
		arg.Location,
		arg.Openingtime,
		arg.Closingtime,
	)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Openingtime,
		&i.Closingtime,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const updateBranches = `-- name: UpdateBranches :exec
UPDATE Branches
SET Name = $2, Location = $3, OpeningTime = $4, ClosingTime = $5
WHERE ID = $1
`

type UpdateBranchesParams struct {
	ID          int32     `json:"id"`
	Name        string    `json:"name"`
	Location    string    `json:"location"`
	Openingtime time.Time `json:"openingtime"`
	Closingtime time.Time `json:"closingtime"`
}

func (q *Queries) UpdateBranches(ctx context.Context, arg UpdateBranchesParams) error {
	_, err := q.db.ExecContext(ctx, updateBranches,
		arg.ID,
		arg.Name,
		arg.Location,
		arg.Openingtime,
		arg.Closingtime,
	)
	return err
}
