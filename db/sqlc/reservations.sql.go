// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reservations.sql

package db

import (
	"context"
	"database/sql"
)

const insertReservation = `-- name: InsertReservation :one
INSERT INTO reservations (IDUser, IDService)
VALUES ($1, $2) RETURNING id, iduser, idservice, createdat, updatedat
`

type InsertReservationParams struct {
	Iduser    int32 `json:"iduser"`
	Idservice int32 `json:"idservice"`
}

func (q *Queries) InsertReservation(ctx context.Context, arg InsertReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, insertReservation, arg.Iduser, arg.Idservice)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.Iduser,
		&i.Idservice,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const selectReservation = `-- name: SelectReservation :many
SELECT r.ID, s.Name AS ServiceName, s.Pricing, r.CreatedAt
FROM reservations r
JOIN services s ON r.IDService = s.ID
WHERE r.IDUser = $1
`

type SelectReservationRow struct {
	ID          int32        `json:"id"`
	Servicename string       `json:"servicename"`
	Pricing     string       `json:"pricing"`
	Createdat   sql.NullTime `json:"createdat"`
}

func (q *Queries) SelectReservation(ctx context.Context, iduser int32) ([]SelectReservationRow, error) {
	rows, err := q.db.QueryContext(ctx, selectReservation, iduser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectReservationRow
	for rows.Next() {
		var i SelectReservationRow
		if err := rows.Scan(
			&i.ID,
			&i.Servicename,
			&i.Pricing,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
