// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: produk.sql

package db

import (
	"context"
)

const createProduk = `-- name: CreateProduk :one
INSERT INTO
    Produk (nama_produk, harga, stok, kategori)
VALUES
    ($1, $2, $3, $4) RETURNING id_produk, nama_produk, harga, stok, kategori, created_at
`

type CreateProdukParams struct {
	NamaProduk string `json:"nama_produk"`
	Harga      string `json:"harga"`
	Stok       int32  `json:"stok"`
	Kategori   string `json:"kategori"`
}

func (q *Queries) CreateProduk(ctx context.Context, arg CreateProdukParams) (Produk, error) {
	row := q.db.QueryRowContext(ctx, createProduk,
		arg.NamaProduk,
		arg.Harga,
		arg.Stok,
		arg.Kategori,
	)
	var i Produk
	err := row.Scan(
		&i.IDProduk,
		&i.NamaProduk,
		&i.Harga,
		&i.Stok,
		&i.Kategori,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduk = `-- name: DeleteProduk :exec
DELETE FROM Produk WHERE id_produk = $1
`

func (q *Queries) DeleteProduk(ctx context.Context, idProduk int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduk, idProduk)
	return err
}

const getAllProduk = `-- name: GetAllProduk :many
SELECT id_produk, nama_produk, harga, stok, kategori, created_at FROM Produk
`

func (q *Queries) GetAllProduk(ctx context.Context) ([]Produk, error) {
	rows, err := q.db.QueryContext(ctx, getAllProduk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Produk
	for rows.Next() {
		var i Produk
		if err := rows.Scan(
			&i.IDProduk,
			&i.NamaProduk,
			&i.Harga,
			&i.Stok,
			&i.Kategori,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduk = `-- name: GetProduk :one
SELECT FROM Produk WHERE id_produk = $1
`

type GetProdukRow struct {
}

func (q *Queries) GetProduk(ctx context.Context, idProduk int32) (GetProdukRow, error) {
	row := q.db.QueryRowContext(ctx, getProduk, idProduk)
	var i GetProdukRow
	err := row.Scan()
	return i, err
}

const updateProduk = `-- name: UpdateProduk :exec
UPDATE Produk SET harga = $1 WHERE id_produk = $2 RETURNING id_produk, nama_produk, harga, stok, kategori, created_at
`

type UpdateProdukParams struct {
	Harga    string `json:"harga"`
	IDProduk int32  `json:"id_produk"`
}

func (q *Queries) UpdateProduk(ctx context.Context, arg UpdateProdukParams) error {
	_, err := q.db.ExecContext(ctx, updateProduk, arg.Harga, arg.IDProduk)
	return err
}
