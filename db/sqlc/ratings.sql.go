// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ratings.sql

package db

import (
	"context"
	"database/sql"
)

const getRatings = `-- name: GetRatings :many
SELECT r.Rating, r.Comment, r.CreatedAt, u.Fullname AS UserName
FROM ratings r
JOIN users u ON r.IDUser = u.ID
WHERE r.IDService = $1
`

type GetRatingsRow struct {
	Rating    int32          `json:"rating"`
	Comment   sql.NullString `json:"comment"`
	Createdat sql.NullTime   `json:"createdat"`
	Username  string         `json:"username"`
}

func (q *Queries) GetRatings(ctx context.Context, idservice int32) ([]GetRatingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRatings, idservice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRatingsRow
	for rows.Next() {
		var i GetRatingsRow
		if err := rows.Scan(
			&i.Rating,
			&i.Comment,
			&i.Createdat,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRating = `-- name: InsertRating :one
INSERT INTO ratings (IDUser, IDService, Rating, Comment)
VALUES ($1, $2, $3, $4) RETURNING id, iduser, idservice, rating, comment, createdat, updatedat
`

type InsertRatingParams struct {
	Iduser    int32          `json:"iduser"`
	Idservice int32          `json:"idservice"`
	Rating    int32          `json:"rating"`
	Comment   sql.NullString `json:"comment"`
}

func (q *Queries) InsertRating(ctx context.Context, arg InsertRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, insertRating,
		arg.Iduser,
		arg.Idservice,
		arg.Rating,
		arg.Comment,
	)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.Iduser,
		&i.Idservice,
		&i.Rating,
		&i.Comment,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
